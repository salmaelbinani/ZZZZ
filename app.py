import streamlit as st
import os
import subprocess
from datetime import datetime
import requests
import pytz
import base64

# URL of the API to get the current time
time_api_url = "http://worldtimeapi.org/api/timezone/Etc/UTC"

def get_current_time():
    try:
        response = requests.get(time_api_url)
        response.raise_for_status()  # Check if the request was successful
        current_time_data = response.json()
        return datetime.fromisoformat(current_time_data["datetime"]).replace(tzinfo=pytz.UTC)
    except requests.exceptions.RequestException as e:
        st.warning(f"Error fetching time: {e}. Using local system time.")
        return datetime.now(pytz.UTC)

# Streamlit app setup
st.set_page_config(page_title="YMM-LASA for Automated Integration", page_icon=":calendar:", layout="wide")

# Sidebar menu with developer names at the bottom
with st.sidebar:
    menu = st.selectbox("Select an option", ["Home", "Part 1: Separation", "Part 2: Integration", "Help"])

    # Add the names of the developers at the bottom of the sidebar
    st.markdown("""
        <div style='position: fixed; bottom: 0; left: 0; padding: 10px;'>
            <p>Developed by <strong>EL MALIANI LATIFA</strong> and <strong>EL BINANI SALMA</strong></p>
        </div>
        """, unsafe_allow_html=True)

# Ajouter une image de fond
def add_bg_from_local(image_file):
            with open(image_file, "rb") as image_file:
                encoded_string = base64.b64encode(image_file.read())
            st.markdown(
            f"""
            <style>
            .stApp {{
            background-image: url(data:image/{"png"};base64,{encoded_string.decode()});
            background-size: cover
            }}
            </style>
            """,
            unsafe_allow_html=True
            )


# Apply background for the Home section
if menu == "Home":
    add_bg_from_local('image.png')
    st.markdown("""
        <div style='text-align: center; padding: 20px;'>
            <h1 style="font-size: 2.5em; color: #007bff; animation: fadeIn 2s;">YMM-LASA Automated Application</h1>
            <p style="font-size: 1.2em; color: #333; margin-top: 20px;">
                Welcome to the world of <strong>"YMM-LASA Automated Application"</strong>, a cutting-edge technological solution designed to transform circuit management within the Production Preparation (PP) department at Yazaki Mekn√®s. This application is the result of a collaboration between Salma El Binani and Latifa El Maliani, two engineers specializing in artificial intelligence and data science. It provides an innovative response to complex challenges by automating and optimizing critical processes.
            </p>
            <p style="font-size: 1.2em; color: #333; margin-top: 20px;">
                <strong>Intelligent Automation for Optimized Production</strong><br>
                Through the advanced use of the MMSTA file, generated by SAP, "YMM-LASA Automated Application" automates the separation of circuit types. This process, which was once manual and time-consuming, is now streamlined, allowing operators to work more efficiently and accurately. The application not only simplifies this task but also makes it more organized, understandable, and accessible to the entire department.
            </p>
            <p style="font-size: 1.2em; color: #333; margin-top: 20px;">
                <strong>Data Integration for Precise Management</strong><br>
                One of the key strengths of this application lies in its ability to seamlessly integrate data from the MMSTA file directly into the LIST CIRCUIT file, produced by the PTC (Product and Tooling Configuration) tool. This integration consolidates all circuit-related information into a single location, ensuring more precise and comprehensive management of production elements. By centralizing this data, the application significantly reduces errors.
            </p>
            <p style="font-size: 1.2em; color: #333; margin-top: 20px;">
                <strong>A Tangible Impact on Productivity</strong><br>
                The impact of "YMM-LASA Automated Application" on the PP department is immediate and significant. The automation of circuit separation and data integration frees up time for operators, allowing them to focus on higher-value tasks. Additionally, the increased transparency and organization make the work more fluid and cohesive, facilitating better communication and collaboration within the team.
            </p>
        </div>
        <style>
        @keyframes fadeIn {{
            from {{ opacity: 0; }}
            to {{ opacity: 1; }}
        }}
        </style>
        """, unsafe_allow_html=True)

# Fetch the current date
current_date = get_current_time()
expiration_date = datetime(2024, 9, 10, 14, 0, tzinfo=pytz.UTC)

if current_date > expiration_date:
    st.error("Thank you for your visit.")
else:
    st.success("Welcome to the application!")

    # Create the uploads directory if it doesn't exist
    uploads_dir = "uploads"
    if not os.path.exists(uploads_dir):
        os.makedirs(uploads_dir)

    if menu == "Part 1: Separation":
        add_bg_from_local('Template.jpg')
        st.header("Part 1: Separation")

        # Section to upload the MMSTA file
        uploaded_mmsta_file = st.file_uploader("Upload your MMSTA file", type=["csv", "xlsx"])

        # Button to apply separation
        if st.button("Separate"):
            if uploaded_mmsta_file:
                mmsta_filepath = os.path.join(uploads_dir, uploaded_mmsta_file.name)
                with open(mmsta_filepath, "wb") as f:
                    f.write(uploaded_mmsta_file.getbuffer())

                # Call the separation script
                result = subprocess.run(["python", "separation.py", mmsta_filepath], capture_output=True, text=True)
                if result.returncode != 0:
                    st.error(f"Error during separation: {result.stderr}")
                else:
                    output_filename = "MMSTA_separe.xlsx"
                    if os.path.exists(output_filename):
                        with open(output_filename, 'rb') as generated_file:
                            st.download_button(
                                label="Download the separated Excel file",
                                data=generated_file,
                                file_name=output_filename,
                                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                            )
                        st.success("Separation completed successfully!")
                    else:
                        st.error("Error generating the Excel file.")
            else:
                st.error("Please upload the MMSTA file.")

    elif menu == "Part 2: Integration":
        add_bg_from_local('Template.jpg')
        st.header("Part 2: Integration")

        # Section to upload the MMSTA_separe file
        uploaded_mmsta_separe_file = st.file_uploader("Upload the separated MMSTA file (MMSTA_separe.xlsx)", type=["xlsx"])

        # Section to upload the Circuit List file
        uploaded_circuit_file = st.file_uploader("Upload your Circuit List file", type=["csv", "xlsx"])

        # Button to apply integration
        if st.button("Integrate"):
            if uploaded_mmsta_separe_file and uploaded_circuit_file:
                mmsta_separe_filepath = os.path.join(uploads_dir, uploaded_mmsta_separe_file.name)
                with open(mmsta_separe_filepath, "wb") as f:
                    f.write(uploaded_mmsta_separe_file.getbuffer())
                
                circuit_filepath = os.path.join(uploads_dir, uploaded_circuit_file.name)
                with open(circuit_filepath, "wb") as f:
                    f.write(uploaded_circuit_file.getbuffer())

                # Call the integration script
                result = subprocess.run(["python", "integration.py", mmsta_separe_filepath, circuit_filepath], capture_output=True, text=True)
                if result.returncode != 0:
                    st.error(f"Error during integration: {result.stderr}")
                else:
                    output_filename = "liste_circuit_integre.xlsx"
                    if os.path.exists(output_filename):
                        with open(output_filename, 'rb') as integration_file:
                            st.download_button(
                                label="Download the integrated Excel file",
                                data=integration_file,
                                file_name=output_filename,
                                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                            )
                        st.success("Integration completed successfully!")
                    else:
                        st.error("Error generating the integrated Excel file.")
            else:
                st.error("Please upload both the separated MMSTA file and the Circuit List.")

    elif menu == "Help":
        add_bg_from_local('Template.jpg')
        st.header("Help")
        st.write("""
            **Part 1: Separation** - Use this section to upload an MMSTA file and separate it into different components.
            
            **Part 2: Integration** - Upload the separated MMSTA file and a Circuit List file to integrate them into a single output.
            
            **Help** - This section provides information about how to use the application. If you encounter""")
