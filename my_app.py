import streamlit as st
import pandas as pd
import nbformat
from nbconvert import PythonExporter
import subprocess
import os
import base64 
from datetime import datetime
import requests
import pytz

# URL of the API to get the current time
time_api_url = "http://worldtimeapi.org/api/timezone/Etc/UTC"

# Get the current time from the API
try:
    response = requests.get(time_api_url)
    response.raise_for_status()  # Check if the request was successful
    current_time_data = response.json()
    current_date = datetime.fromisoformat(current_time_data["datetime"]).replace(tzinfo=pytz.UTC)

    # Define the expiration date with precise time
    expiration_date = datetime(2024, 9, 10, 14, 0, tzinfo=pytz.UTC)

    # Compare the current date to the expiration date
    if current_date > expiration_date:
        st.error("Thank you for your visit.")
    else:
        remaining_time = expiration_date - current_date
        st.success("Welcome to the application!")

        # Add background image
        def add_bg_from_local(image_file):
            with open(image_file, "rb") as image_file:
                encoded_string = base64.b64encode(image_file.read())
            st.markdown(
            f"""
            <style>
            .stApp {{
            background-image: url(data:image/{"png"};base64,{encoded_string.decode()});
            background-size: cover
            }}
            </style>
            """,
            unsafe_allow_html=True
            )
        
        add_bg_from_local('Template.jpg')

        # Application title
        st.title("LASA")

        # Create the uploads directory if it doesn't exist
        uploads_dir = "uploads"
        if not os.path.exists(uploads_dir):
            os.makedirs(uploads_dir)

        # Section to upload the main data file
        uploaded_file = st.file_uploader("Upload your MMSTA file", type=["csv", "xlsx"])

        # Section to upload the Circuit List file
        uploaded_circuit_file = st.file_uploader("Upload your Circuit List file", type=["csv", "xlsx"])

        # Button to apply separation
        if st.button("Separate"):
            if uploaded_file is not None and uploaded_circuit_file is not None:
                # Save the uploaded file in the uploads directory
                file_path = os.path.join(uploads_dir, "MMSTA_file" + os.path.splitext(uploaded_file.name)[1])
                with open(file_path, "wb") as f:
                    f.write(uploaded_file.getbuffer())
                
                # Save the Circuit List file in the uploads directory
                circuit_file_path = os.path.join(uploads_dir, "Circuit_List" + os.path.splitext(uploaded_circuit_file.name)[1])
                with open(circuit_file_path, "wb") as f:
                    f.write(uploaded_circuit_file.getbuffer())

                # Read and modify the separation notebook
                notebook_path = 'separation.ipynb'  # Make sure this path is correct
                with open(notebook_path, 'r', encoding='utf-8') as f:
                    nb = nbformat.read(f, as_version=4)
                
                # Replace the paths of the Excel files in the notebook
                for cell in nb.cells:
                    if cell.cell_type == 'code':
                        cell.source = cell.source.replace('MMSTA UPLOAD DHN LOWDASH.xlsx', file_path)
                        cell.source = cell.source.replace('List Circuit.xlsx', circuit_file_path)
                
                # Convert the notebook to Python code
                exporter = PythonExporter()
                python_code, _ = exporter.from_notebook_node(nb)
                
                # Temporarily save the generated Python code
                with open("temp_code.py", "w", encoding='utf-8') as temp_file:
                    temp_file.write(python_code)
                
                # Execute the generated Python code
                subprocess.run(["python3", "temp_code.py"])

                # Name of the generated Excel file
                generated_file_name = "MMSTA_separe.xlsx"  # Name of the Excel file generated by the separation code
                if os.path.exists(generated_file_name):
                    # Allow the user to download the generated file
                    with open(generated_file_name, 'rb') as generated_file:
                        st.download_button(
                            label="Download the generated Excel file",
                            data=generated_file,
                            file_name=generated_file_name,
                            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                        )
                else:
                    st.error("Error generating the Excel file.")

                st.success("Separation completed successfully!")
            else:
                st.error("Please upload both the data file and the Circuit List.")

        # Button to apply integration
        if st.button("Integrate"):
            if uploaded_file is not None and uploaded_circuit_file is not None:
                # Save the uploaded file in the uploads directory
                file_path = os.path.join(uploads_dir, "MMSTA_separe" + os.path.splitext(uploaded_file.name)[1])
                with open(file_path, "wb") as f:
                    f.write(uploaded_file.getbuffer())
                
                # Save the Circuit List file in the uploads directory
                circuit_file_path = os.path.join(uploads_dir, "Circuit_List" + os.path.splitext(uploaded_circuit_file.name)[1])
                with open(circuit_file_path, "wb") as f:
                    f.write(uploaded_circuit_file.getbuffer())

                # Read and modify the integration notebook
                notebook_integration_path = 'integrationfinal1.ipynb'  # Make sure this path is correct
                with open(notebook_integration_path, 'r', encoding='utf-8') as f:
                    nb_integration = nbformat.read(f, as_version=4)
                
                # Replace the paths of the Excel files in the integration notebook
                for cell in nb_integration.cells:
                    if cell.cell_type == 'code':
                        cell.source = cell.source.replace('MMSTA_separe.xlsx', file_path)
                        cell.source = cell.source.replace('liste_circuit.xlsx', circuit_file_path)
                
                # Convert the integration notebook to Python code
                exporter_integration = PythonExporter()
                python_code_integration, _ = exporter_integration.from_notebook_node(nb_integration)
                
                # Temporarily save the generated Python code
                with open("temp_code_integration.py", "w", encoding='utf-8') as temp_file_integration:
                    temp_file_integration.write(python_code_integration)
                
                # Execute the generated Python code for integration
                subprocess.run(["python3", "temp_code_integration.py"])

                # Name of the generated Excel file by integration
                output_path = "liste_circuit_integre.xlsx"  # Name of the generated Excel file
                if os.path.exists(output_path):
                    # Allow the user to download the generated integration file
                    with open(output_path, 'rb') as integration_file:
                        st.download_button(
                            label="Download the integrated Excel file",
                            data=integration_file,
                            file_name=output_path,
                            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                        )
                else:
                    st.error("Error generating the integrated Excel file.")

                st.success("Integration completed successfully!")
            else:
                st.error("Please upload both the data file and the Circuit List.")

        # Add the names of the developers at the bottom-left corner
        st.markdown("""
            <div style='position: fixed; bottom: 0; left: 0; padding: 10px;'>
                <p>Developed by <strong>EL MALIANI LATIFA</strong> and <strong>EL BINANI SALMA</strong></p>
            </div>
            """, unsafe_allow_html=True)

except requests.exceptions.RequestException as e:
    st.error("Please check your internet connection and try again.")